# Orchestra Configuration for Autonomous Teams
# This file defines the team structure, repositories, and integration points
# for federated development using the Mission Orchestra approach

orchestra:
  version: 1.0
  organization: Your Organization
  model: federated_repository
  coordination_style: mission_based

# Repository structure configuration
repository:
  structure: git_submodules
  super_project:
    name: main-project
    path: /
    role: integration_coordinator
    branches:
      main: main
      develop: develop
      release_prefix: release/

  submodules:
    - name: mobile-app
      path: apps/mobile
      repository: https://github.com/your-org/mobile-app.git
      branch: main
      team: mobile

    - name: web-app
      path: apps/web
      repository: https://github.com/your-org/web-app.git
      branch: main
      team: web

    - name: backend-service
      path: services/backend
      repository: https://github.com/your-org/backend-service.git
      branch: main
      team: backend

    - name: ai-service
      path: services/ai
      repository: https://github.com/your-org/ai-service.git
      branch: main
      team: ai

    - name: data-pipeline
      path: data/pipeline
      repository: https://github.com/your-org/data-pipeline.git
      branch: main
      team: data

# Team definitions and capabilities
teams:
  - id: mobile
    name: Mobile Team
    type: application
    size: 5-7

    repositories:
      - mobile-app

    responsibilities:
      - iOS application
      - Android application
      - Mobile UI/UX
      - Offline capabilities
      - Push notifications

    technologies:
      - React Native
      - Swift
      - Kotlin
      - TypeScript

    contacts:
      lead: mobile-lead@example.com
      slack_channel: "#team-mobile"
      on_call: mobile-oncall@example.com

    capabilities:
      platforms: [ios, android]
      min_sdk: {ios: 14.0, android: 26}
      features: [offline_mode, biometric_auth, push_notifications]

  - id: web
    name: Web Team
    type: application
    size: 4-6

    repositories:
      - web-app

    responsibilities:
      - Web application
      - Admin portal
      - Public website
      - SEO optimization

    technologies:
      - Next.js
      - React
      - TypeScript
      - Tailwind CSS

    contacts:
      lead: web-lead@example.com
      slack_channel: "#team-web"

    capabilities:
      browsers: [chrome, firefox, safari, edge]
      responsive: true
      pwa: true

  - id: backend
    name: Backend Team
    type: platform
    size: 6-8

    repositories:
      - backend-service

    responsibilities:
      - REST APIs
      - GraphQL APIs
      - Business logic
      - Data persistence
      - Authentication/Authorization

    technologies:
      - Node.js
      - PostgreSQL
      - Redis
      - Docker

    contacts:
      lead: backend-lead@example.com
      slack_channel: "#team-backend"
      on_call: backend-oncall@example.com

    capabilities:
      api_types: [rest, graphql]
      databases: [postgresql, redis, elasticsearch]
      messaging: [rabbitmq, kafka]

  - id: ai
    name: AI/ML Team
    type: specialized
    size: 4-5

    repositories:
      - ai-service

    responsibilities:
      - ML model development
      - Prediction services
      - Recommendation system
      - Model training pipeline
      - Feature engineering

    technologies:
      - Python
      - TensorFlow
      - PyTorch
      - Kubernetes

    contacts:
      lead: ai-lead@example.com
      slack_channel: "#team-ai"

    capabilities:
      ml_frameworks: [tensorflow, pytorch, scikit-learn]
      model_serving: [tensorflow_serving, mlflow]
      compute: [gpu_cluster, distributed_training]

  - id: data
    name: Data Team
    type: platform
    size: 3-4

    repositories:
      - data-pipeline

    responsibilities:
      - Data pipelines
      - ETL processes
      - Data warehouse
      - Analytics
      - Data quality

    technologies:
      - Apache Spark
      - Airflow
      - BigQuery
      - Python

    contacts:
      lead: data-lead@example.com
      slack_channel: "#team-data"

    capabilities:
      pipelines: [batch, streaming]
      processing: [spark, beam, flink]
      storage: [bigquery, s3, gcs]

  - id: devops
    name: DevOps Team
    type: platform
    size: 3-4

    repositories: []  # Uses infrastructure-as-code repo

    responsibilities:
      - CI/CD pipelines
      - Infrastructure
      - Monitoring
      - Security
      - Deployment

    technologies:
      - Kubernetes
      - Terraform
      - GitHub Actions
      - Prometheus

    contacts:
      lead: devops-lead@example.com
      slack_channel: "#team-devops"
      on_call: devops-oncall@example.com

    capabilities:
      platforms: [gcp, aws]
      orchestration: [kubernetes, docker_swarm]
      ci_cd: [github_actions, jenkins]

# Integration points between teams
integrations:
  - id: mobile_backend_api
    name: Mobile to Backend API
    type: rest_api
    provider: backend
    consumers: [mobile]

    specification:
      format: openapi
      version: 3.0
      location: docs/api/mobile-api.yaml

    requirements:
      authentication: jwt
      rate_limiting: 1000_per_minute
      sla: 99.9%
      latency_p99: 500ms

  - id: web_backend_api
    name: Web to Backend API
    type: graphql
    provider: backend
    consumers: [web]

    specification:
      format: graphql_schema
      location: docs/api/web-api.graphql

    requirements:
      authentication: jwt
      rate_limiting: 5000_per_minute
      sla: 99.9%

  - id: backend_ai_service
    name: Backend to AI Service
    type: grpc
    provider: ai
    consumers: [backend]

    specification:
      format: protobuf
      location: protos/ai-service.proto

    requirements:
      authentication: mtls
      timeout: 30_seconds
      retry_policy: exponential_backoff

  - id: backend_data_feed
    name: Backend to Data Pipeline
    type: event_stream
    provider: backend
    consumers: [data]

    specification:
      format: avro
      broker: kafka
      topic: events.user.activity

    requirements:
      delivery: at_least_once
      retention: 7_days
      partitioning: by_user_id

# Coordination settings
coordination:
  meetings:
    - name: Mission Alignment
      frequency: per_mission
      duration: 90_minutes
      required: [all_team_leads, pm, architect]

    - name: Weekly Sync
      frequency: weekly
      duration: 30_minutes
      required: [team_leads]
      optional: [architects, pm]

    - name: Integration Checkpoint
      frequency: bi_weekly
      duration: 60_minutes
      required: [integration_owners]

  communication:
    primary_channel: slack

    channels:
      announcements: "#mission-announcements"
      general: "#mission-general"
      integration: "#mission-integration"
      incidents: "#mission-incidents"

    escalation_path:
      - level: team_lead
        timeout: 2_hours
      - level: architect
        timeout: 4_hours
      - level: engineering_manager
        timeout: 8_hours
      - level: cto
        timeout: 24_hours

  documentation:
    location: docs/missions/

    required_docs:
      - mission_prd
      - alignment_notes
      - team_handoffs
      - integration_contracts
      - retrospectives

# Mission execution settings
mission_execution:
  phases:
    planning:
      duration: 1-2_weeks
      gates:
        - prd_approval
        - architecture_review
        - team_commitment

    development:
      duration: variable
      checkpoints:
        - weekly_status
        - integration_tests
        - milestone_reviews

    release:
      duration: 1_week
      gates:
        - feature_complete
        - integration_tested
        - performance_validated
        - security_reviewed

  success_metrics:
    process:
      - on_time_delivery
      - integration_issues_count
      - team_satisfaction_score

    technical:
      - api_compatibility
      - performance_targets_met
      - zero_downtime_deployment

# Triage and routing rules
triage:
  classification_rules:
    bug:
      indicators: [broken, error, crash, regression]
      workflow: direct_to_team

    enhancement:
      indicators: [improve, enhance, optimize, refactor]
      workflow: product_backlog

    feature:
      indicators: [new, create, add, implement]
      workflow: mission_planning

  team_assignment_rules:
    - pattern: "mobile|ios|android|app"
      assign_to: mobile

    - pattern: "web|browser|portal|website"
      assign_to: web

    - pattern: "api|backend|service|database"
      assign_to: backend

    - pattern: "ml|ai|model|prediction"
      assign_to: ai

    - pattern: "data|etl|pipeline|analytics"
      assign_to: data

    - pattern: "deploy|ci|cd|infrastructure"
      assign_to: devops

    - pattern: "multiple teams|integration|cross-team"
      assign_to: architecture_review

  severity_levels:
    critical:
      response_time: immediate
      escalation: automatic
      on_call: required

    high:
      response_time: 4_hours
      escalation: if_not_acknowledged
      on_call: optional

    medium:
      response_time: 24_hours
      escalation: none
      on_call: none

    low:
      response_time: best_effort
      escalation: none
      on_call: none

# Environment configuration
environments:
  development:
    auto_deploy: true
    approval_required: false
    submodule_update: automatic

  staging:
    auto_deploy: true
    approval_required: true
    submodule_update: manual
    integration_tests: required

  production:
    auto_deploy: false
    approval_required: true
    submodule_update: manual
    gates:
      - all_tests_passing
      - performance_validated
      - security_scanned
      - change_approved